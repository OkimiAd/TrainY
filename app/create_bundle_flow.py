import time

from aiogram import types, Router, F
from aiogram.enums import ContentType, ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery

import app.keyboards as kb
from app.handlers import DocumentMess
import app.data.BundleDAO as daoBundle
import app.data.UserDAO as daoUser
import app.data.database as db

router = Router()

commission_const = 10
min_sum_withdrawal = 5000


class GetMoney(StatesGroup):
    get_money = State()
    get_transfer_data = State()


class Bundle(StatesGroup):
    assembly = State()
    name = State()
    price = State()
    company = State()
    date_interview = State()
    type = State()
    direction = State()


@router.message(F.text == '–î–ª—è –∞–≤—Ç–æ—Ä–æ–≤')
async def for_authors(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    await message.answer(
        "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —Ö–æ—á–µ—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º. "
        "–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—à–µ–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏, –Ω–æ —Ç–µ–±–µ –Ω–µ –¥–∞–ª–∏ –æ—Ñ–µ—Ä, —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ç–æ–º —á—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ —Å–∏–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º, "
        "–∏ –æ–Ω–∏ –ø—Ä—è–º–æ –∫–∞–∫ –∏ —Ç—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", reply_markup=kb.for_authors)


@router.message(F.text == '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏')
async def withdraw_money(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    user = daoUser.get_user(user_id=message.from_user.id)
    await message.answer(f'*{user.cash}‚ÇΩ* –í–∞–º —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Çü§ë', parse_mode=ParseMode.MARKDOWN_V2)
    await message.answer(f'–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {commission_const}% \+ 13% –ù–î–§–õ',
                         parse_mode=ParseMode.MARKDOWN_V2)
    is_user_have_money_request = db.is_user_have_money_request(user_id=message.from_user.id)
    if is_user_have_money_request:
        await message.answer(f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è')
    elif user.cash < min_sum_withdrawal:
        await message.answer(f'–í—ã–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_sum_withdrawal}‚ÇΩ. –í–∞–º –≤—ã–≤–æ–¥ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
    else:
        await message.answer(f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤–≤–µ–¥–∏—Ç–µ\n/get_money')


@router.message(Command('get_money'))
async def withdraw_money(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    user = daoUser.get_user(user_id=message.from_user.id)
    is_user_have_money_request = db.is_user_have_money_request(user_id=message.from_user.id)
    if is_user_have_money_request:
        await message.answer(f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è')
        return
    elif user.cash < min_sum_withdrawal:
        await message.answer(f'–í—ã–≤–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –≤–∞—Å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞')
        return
    await state.set_state(GetMoney.get_money)
    await message.answer(f'–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?')


@router.message(GetMoney.get_money)
async def withdraw_money(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    user = daoUser.get_user(user_id=message.from_user.id)
    if int(message.text) > user.cash:
        await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    elif int(message.text) < min_sum_withdrawal:
        await message.answer(f'–ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º {min_sum_withdrawal}')
        return

    commission = int(float(message.text) / 100 * commission_const)
    ndfl = int((int(message.text) - commission) / 100 * 13)
    for_author = int(message.text) - commission - ndfl

    await message.answer(
        f'–ò—Ç–æ–≥–æ –∫ –≤—ã–≤–æ–¥—É {message.text}‚ÇΩ - {commission}‚ÇΩ (–∫–æ–º–∏—Å—Å–∏—è {commission_const}%) - {ndfl}‚ÇΩ (–ù–î–§–õ 13%) = {for_author}‚ÇΩ')

    await state.update_data(commission=commission)
    await state.update_data(ndfl=ndfl)
    await state.update_data(for_author=for_author)

    await state.set_state(GetMoney.get_transfer_data)
    await message.answer(
        f'–í–≤–µ–¥–∏—Ç–µ:\n'
        f' - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
        f' - –∏–º—è\n'
        f' - –±–∞–Ω–∫\n'
        f'–∫—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')


@router.message(GetMoney.get_transfer_data)
async def withdraw_money(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    if len(message.text) < 10:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤')
        return

    await message.answer(f'–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π')
    state_data = await state.get_data()
    db.add_money_request(user_id=message.from_user.id, request_data=message.text, commission=state_data["commission"],
                         ndfl=state_data["ndfl"], for_author=state_data["for_author"])
    await state.clear()


@router.message(F.text == '–í—ã–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def create_bundle(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    await state.clear()
    await message.answer(
        "–ó–∞–ø–∏—Å–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∏–¥–µ –±–∞–Ω–¥–ª–æ–≤. \n"
        "–ö–∞–∂–¥—ã–π –±–∞–Ω–¥–ª —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞, –∞—É–¥–∏–æ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. \n"
        "–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. \n"
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ê —Ç–∞–∫ –∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∑—è—Ç—Å—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ")

    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–¥–ª–∞ –æ—Ç–ø—Ä–∞–≤—å–µ\n/commit")
    await state.set_state(Bundle.assembly)


@router.message(Bundle.assembly)
async def assembly_bundle(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    data = await state.get_data()
    list_elements = data.get("assembly", [])

    if message.text == '/commit':
        if len(list_elements) < 1:
            await message.answer("–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –±–∞–Ω–¥–ª")
            return
        await message.answer("–ë–∞–Ω–¥–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω")
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–¥–ª–∞")
        await state.set_state(Bundle.name)
    else:
        if message.content_type is ContentType.TEXT:
            list_elements.append(message.text)
        elif message.content_type is ContentType.DOCUMENT:
            list_elements.append(DocumentMess(message.document.file_id, type_doc="doc", caption=message.caption))
        elif message.content_type is ContentType.AUDIO:
            list_elements.append(DocumentMess(message.audio.file_id, type_doc="audio", caption=message.caption))
        elif message.content_type is ContentType.VIDEO:
            list_elements.append(DocumentMess(message.video.file_id, type_doc="video", caption=message.caption))
        elif message.content_type is ContentType.PHOTO:
            list_elements.append(DocumentMess(message.photo[0].file_id, type_doc="photo", caption=message.caption))
        else:
            await message.answer(
                "–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–∞–Ω–¥–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ —Å–∂–∞—Ç–∏—è")
        await state.update_data(assembly=list_elements)


@router.message(Bundle.name)
async def name_bundle(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    if len(message.text) < 5:
        await message.answer(f'–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å {len(message.text)}')
        return
    if len(message.text) > 40:
        await message.answer(f'–ú–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å {len(message.text)}')
        return
    await state.update_data(name=message.text)

    await message.answer("–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –¥–æ–ø —Å–∏–º–≤–æ–ª–æ–≤)")
    await state.set_state(Bundle.price)


@router.message(Bundle.price)
async def price_bundle(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    try:
        int(message.text)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    if int(message.text) == 0 or int(message.text) <= 50:
        await message.answer("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 50")
        return

    await state.update_data(price=message.text)

    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏(–ê–Ω–≥–ª)")
    await state.set_state(Bundle.company)


@router.message(Bundle.company)
async def company_name_bundle(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    if len(message.text) < 2:
        await message.answer(f'–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å {len(message.text)}')
        return
    if len(message.text) > 40:
        await message.answer(f'–ú–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å {len(message.text)}')
        return

    await state.update_data(company=message.text)
    await state.set_state(Bundle.date_interview)
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.MM.yyyy")


@router.message(Bundle.date_interview)
async def date_bundle(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    try:
        time.strptime(message.text, '%d.%m.%Y')
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        return

    await state.update_data(date=message.text)
    await state.set_state(Bundle.type)
    await message.answer("–ö–∞–∫–æ–π —Ç–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è? (–°–∫—Ä–∏–Ω–∏–Ω–≥, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π)", reply_markup=kb.type_interview)

@router.message(Bundle.type)
async def date_bundle(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    if len(message.text) < 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è", reply_markup=kb.type_interview)
        return

    await state.update_data(type=message.text)
    await state.set_state(Bundle.direction)
    await message.answer("–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? BackEnd, FrontEnd –∏ –¥—Ä—É–≥–∏–µ", reply_markup=kb.directions)


@router.message(Bundle.direction)
async def grade_bundle(message: types.Message, state: FSMContext):
    daoUser.update_last_action(message.from_user.id)
    await state.update_data(direction=message.text)
    await message.answer(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –≤–æ—Ç —Ç–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    data = await state.get_data()
    listt = data["assembly"]
    for i in listt:
        if type(i) is DocumentMess:
            if i.type_doc == "doc":
                await message.answer_document(i.file_id, caption=i.caption)
            elif i.type_doc == "audio":
                await message.answer_audio(i.file_id, caption=i.caption)
            elif i.type_doc == "photo":
                await message.answer_photo(i.file_id, caption=i.caption)
            elif i.type_doc == "video":
                await message.answer_video(i.file_id, caption=i.caption)
        else:
            await message.answer(i)
    await message.answer('–ê –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –≤–∞–∫–∞–Ω—Å–∏–π –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫')
    await message.answer(f'{data["name"]}\n{data["company"]}\n{data["direction"]}\n{data["date"]}\n{data["price"]}‚ÇΩ',
                         reply_markup=kb.create_bundle)


@router.callback_query(F.data == "moderate")
async def callback_query(callback: CallbackQuery, state: FSMContext):
    daoUser.update_last_action(callback.from_user.id)
    if await state.get_state() != str(Bundle.direction.state):
        print("canceled")
        return

    data = await state.get_data()
    await callback.message.answer(
        '–í–∞—à bundle —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ö–æ–≥–¥–∞ –æ–Ω –ø—Ä–æ–π–¥–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é, –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',
        reply_markup=kb.main)

    daoBundle.create_bundle(author_id=callback.from_user.id,
                            name=data["name"],
                            price=data["price"],
                            company=data["company"],
                            date_interview=data["date"],
                            direction=data["direction"],
                            assembly=data["assembly"],
                            )
    await state.clear()


@router.callback_query(F.data == "delete")
async def callback_query(callback: CallbackQuery, state: FSMContext):
    daoUser.update_last_action(callback.from_user.id)
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞", reply_markup=kb.main)
    await state.clear()


@router.message(F.text == '–ú–æ–∏ –∑–∞–ø–∏—Å–∏')
async def withdraw_money(message: types.Message):
    daoUser.update_last_action(message.from_user.id)
    list_bundles = daoBundle.get_bundles_for_author(message.from_user.id)
    for item in list_bundles:
        await message.answer(
            f'(id {item.bundle_id}) - {item.name} - {item.price}‚ÇΩ\n'
            f'{item.direction} - {item.company} - {item.date_interview}\n'
            f'—Å–∫–∞—á–∏–≤–∞–Ω–∏–π - {item.bought_count} –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ - {item.earned}‚ÇΩ')
