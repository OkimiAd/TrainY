import time

from aiogram import types, Router, F
from aiogram.enums import ContentType, ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery

import app.data.database as db
import app.keyboards as kb
from app.handlers import DocumentMess
import app.data.BundleDAO as daoBundle
import app.data.UserDAO as daoUser

router = Router()


class GetMoney(StatesGroup):
    get_money = State()
    get_transfer_data = State()


class Bundle(StatesGroup):
    assembly = State()
    name = State()
    price = State()
    company = State()
    date_interview = State()
    direction = State()


@router.message(F.text == '–î–ª—è –∞–≤—Ç–æ—Ä–æ–≤')
async def for_authors(message: types.Message, state: FSMContext):
    await message.answer(
        "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —Ö–æ—á–µ—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º. "
        "–ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—à–µ–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏, –Ω–æ —Ç–µ–±–µ –Ω–µ –¥–∞–ª–∏ –æ—Ñ–µ—Ä, —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ç–æ–º —á—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ —Å–∏–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º, "
        "–∏ –æ–Ω–∏ –ø—Ä—è–º–æ –∫–∞–∫ –∏ —Ç—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", reply_markup=kb.for_authors)


@router.message(F.text == '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏')
async def withdraw_money(message: types.Message, state: FSMContext):
    user = daoUser.get_user(user_id=message.from_user.id)
    await message.answer(f'*{user.cash}‚ÇΩ* –í–∞–º —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Çü§ë', parse_mode=ParseMode.MARKDOWN_V2)
    if user.cash < 1000:
        await message.answer(f'–í—ã–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1000‚ÇΩ. –í–∞–º –≤—ã–≤–æ–¥ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
    else:
        await message.answer(f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤–≤–µ–¥–∏—Ç–µ\n/get_money')


@router.message(Command('get_money'))
async def withdraw_money(message: types.Message, state: FSMContext):
    user = daoUser.get_user(user_id=message.from_user.id)
    if user.cash < 1000:
        await message.answer(f'–í—ã–≤–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –≤–∞—Å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞')
        return
    await state.set_state(GetMoney.get_money)
    await message.answer(f'–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?')


@router.message(GetMoney.get_money)
async def withdraw_money(message: types.Message, state: FSMContext):
    user = daoUser.get_user(user_id=message.from_user.id)
    if int(message.text) > user.cash:
        await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    await state.update_data(money=int(message.text))
    await state.set_state(GetMoney.get_transfer_data)
    await message.answer(
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏–º—è –∏ –±–∞–Ω–∫ –∫—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')


@router.message(GetMoney.get_transfer_data)
async def withdraw_money(message: types.Message, state: FSMContext):
    # message.text
    # db add money request
    await message.answer(f'–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π')


@router.message(F.text == '–í—ã–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def create_bundle(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–∞–ø–∏—Å–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∏–¥–µ –±–∞–Ω–¥–ª–æ–≤. "
        "–ö–∞–∂–¥—ã–π –±–∞–Ω–¥–ª —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞, –∞—É–¥–∏–æ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. "
        "–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. "
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –±–µ–∑ —Å–∂–∞—Ç–∏—è")

    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–¥–ª–∞ –æ—Ç–ø—Ä–∞–≤—å–µ\n/commit")

    await state.set_state(Bundle.assembly)

    user = message.from_user
    print("–î–ª—è –∞–≤—Ç–æ—Ä–æ–≤ " + user.username)


@router.message(Bundle.assembly)
async def assembly_bundle(message: types.Message, state: FSMContext):
    if message.text == '/commit':
        print('/commit')
        await message.answer("–ë–∞–Ω–¥–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–¥–ª–∞(–ê–Ω–≥–ª)")
        await state.set_state(Bundle.name)
    else:
        data = await state.get_data()
        list_elements = data.get("assembly", [])

        if message.content_type is ContentType.TEXT:
            list_elements.append(message.text)
        elif message.content_type is ContentType.DOCUMENT:
            list_elements.append(DocumentMess(message.document.file_id))
        else:
            await message.answer("–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–∞–Ω–¥–¥–µ")
        await state.update_data(assembly=list_elements)


@router.message(Bundle.name)
async def name_bundle(message: types.Message, state: FSMContext):
    user = message.from_user
    print("name_bundle " + user.username + " " + message.text)

    await state.update_data(name=message.text)

    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –¥–æ–ø —Å–∏–º–≤–æ–ª–æ–≤)")
    await state.set_state(Bundle.price)


@router.message(Bundle.price)
async def price_bundle(message: types.Message, state: FSMContext):
    user = message.from_user
    print("price_bundle " + user.username + " " + message.text)

    await state.update_data(price=message.text)

    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    await state.set_state(Bundle.company)


@router.message(Bundle.company)
async def company_name_bundle(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await state.set_state(Bundle.date_interview)
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.MM.yyyy")


@router.message(Bundle.date_interview)
async def date_bundle(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await state.set_state(Bundle.direction)
    await message.answer("–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? BackEnd, FrontEnd –∏ –¥—Ä—É–≥–∏–µ", reply_markup=kb.directions)


@router.message(Bundle.direction)
async def grade_bundle(message: types.Message, state: FSMContext):
    await state.update_data(direction=message.text)
    await end_assembling(message, state)


async def end_assembling(message: types.Message, state: FSMContext):
    await message.answer(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –≤–æ—Ç —Ç–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    data = await state.get_data()
    listt = data["assembly"]
    for i in listt:
        if type(i) is DocumentMess:
            await message.answer_document(i.doc_id)
        else:
            await message.answer(i)
    await message.answer('–ê –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –≤–∞–∫–∞–Ω—Å–∏–π –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫')
    await message.answer(f'{data["name"]}\n{data["company"]}\n{data["direction"]}\n{data["date"]}\n{data["price"]}‚ÇΩ',
                         reply_markup=kb.create_bundle)


@router.callback_query(F.data == "moderate")
async def callback_query(callback: CallbackQuery, state: FSMContext):
    if await state.get_state() != str(Bundle.direction.state):
        print("canceled")
        return

    data = await state.get_data()
    await callback.message.answer(
        '–í–∞—à bundle —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ö–æ–≥–¥–∞ –æ–Ω –ø—Ä–æ–π–¥–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é, –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',
        reply_markup=kb.main)

    await daoBundle.create_bundle(author_id=callback.from_user.id,
                           name=data["name"],
                           price=data["price"],
                           company=data["company"],
                           date_interview=data["date"],
                           direction=data["direction"],
                           assembly=data["assembly"],
                           )
    time.sleep(2)
    # await on_start(callback.message, state)
    await state.clear()
