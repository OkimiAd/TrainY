from aiogram import types, Router, F
from aiogram.enums import ContentType
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery

import app.database as db
import app.keyboards as kb

router = Router()


class DocumentMess:
    doc_id: int

    def __init__(self, f):
        self.doc_id = f


class Bundle(StatesGroup):
    assembly = State()
    name = State()
    price = State()
    company = State()
    date = State()
    direction = State()


@router.message(CommandStart())
async def on_start(message: types.Message, state: FSMContext):
    user = message.from_user
    await message.answer_sticker("CAACAgIAAxkBAAEM6o9m_xXrhAqbSSVi3qlJF-avCUEN0AACSB0AAuIkgEot-Nk2wyVajjYE")

    await message.answer("–ü—Ä–∏–≤–µ—Ç " + user.first_name)
    await message.answer(
        "–≠—Ç–æ –±–æ—Ç TrainY! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ª—é–±—É—é –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –ª—é–±—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π.\n–î–ª—è –≤—Å–µ—Ö –Ω–æ–≤–∏—á–∫–æ–≤ —Å–∫–∏–¥–∫–∞ 100% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É‚ò∫Ô∏è",
        reply_markup=kb.main)

    db.add_user(user.id, user.username)
    await state.clear()
    print("/start " + user.username)


@router.message(Command('cancel'))
async def on_cancel(message: types.Message, state: FSMContext):
    await state.clear()


@router.message(F.text == 'FAQ')
async def on_FAQ(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–¢—É—Ç —Ç—ã –Ω–∞–π–¥–µ—à—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç—Å—Ç—Ä—É–∫–∏—é –ø–æ —Ç–æ–º—É —á—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç", protect_content=True)
    await message.answer("1. –ü–ª–∞—Ç–∏ –±–æ–ª—å—à–µ –¥–µ–Ω—è–∫")

    user = message.from_user

    print("FAQ " + user.username)


@router.message(F.text == '–î–ª—è –∞–≤—Ç–æ—Ä–æ–≤')
async def for_authors(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–∞–ø–∏—Å–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∏–¥–µ –±–∞–Ω–¥–ª–æ–≤. "
        "–ö–∞–∂–¥—ã–π –±–∞–Ω–¥–ª —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞, –∞—É–¥–∏–æ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. "
        "–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. "
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –±–µ–∑ —Å–∂–∞—Ç–∏—è")

    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–¥–ª–∞ –æ—Ç–ø—Ä–∞–≤—å–µ\n/commit")

    await state.set_state(Bundle.assembly)

    user = message.from_user
    print("–î–ª—è –∞–≤—Ç–æ—Ä–æ–≤ " + user.username)


@router.message(Bundle.assembly)
async def assembly_bundle(message: types.Message, state: FSMContext):
    if message.text == '/commit':
        print('/commit')
        await message.answer("–ë–∞–Ω–¥–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–¥–ª–∞")
        await state.set_state(Bundle.name)
    else:
        data = await state.get_data()
        list_elements = data.get("assembly", [])

        if message.content_type is ContentType.TEXT:
            list_elements.append(message.text)
        elif message.content_type is ContentType.DOCUMENT:
            list_elements.append(DocumentMess(message.document.file_id))
        else:
            await message.answer("–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–∞–Ω–¥–¥–µ")
        await state.update_data(assembly=list_elements)


@router.message(Bundle.name)
async def name_bundle(message: types.Message, state: FSMContext):
    user = message.from_user
    print("name_bundle " + user.username + " " + message.text)

    await state.update_data(name=message.text)

    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –¥–æ–ø —Å–∏–º–≤–æ–ª–æ–≤)")
    await state.set_state(Bundle.price)


@router.message(Bundle.price)
async def price_bundle(message: types.Message, state: FSMContext):
    user = message.from_user
    print("price_bundle " + user.username + " " + message.text)

    await state.update_data(price=message.text)

    await message.answer("–¶–µ–Ω–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    await state.set_state(Bundle.company)


@router.message(Bundle.company)
async def company_name_bundle(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await state.set_state(Bundle.date)
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.MM.yyyy")


@router.message(Bundle.date)
async def date_bundle(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await state.set_state(Bundle.direction)
    await message.answer("–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? BackEnd, FrontEnd –∏ –¥—Ä—É–≥–∏–µ")


@router.message(Bundle.direction)
async def grade_bundle(message: types.Message, state: FSMContext):
    await state.update_data(direction=message.text)
    await end_assembling(message, state)


async def end_assembling(message: types.Message, state: FSMContext):
    await message.answer(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –≤–æ—Ç —Ç–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    data = await state.get_data()
    listt = data["assembly"]
    for i in listt:
        if type(i) is DocumentMess:
            await message.answer_document(i.doc_id)
        else:
            await message.answer(i)
    await message.answer('–ê –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –≤–∞–∫–∞–Ω—Å–∏–π –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫')
    await message.answer(f'{data["name"]}\n{data["company"]}\n{data["direction"]}\n{data["date"]}\n{data["price"]}‚ÇΩ',
                         reply_markup=kb.moderate)


@router.callback_query(F.data == "moderate")
async def callback_query(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    db.add_bundle(author_id=callback.from_user.id,
                  name=data["name"],
                  price=data["price"],
                  company=data["company"],
                  date_interview=data["date"],
                  direction=data["direction"],
                  assembly=data["assembly"],
                  )


    # dd = data["name"]
# await callback.message.answer('moderate')
# await callback.message.answer(dd)


@router.message()
async def other(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—èüòÖ", protect_content=True)
    user = message.from_user
    print(message.text + user.username)
