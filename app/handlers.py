import json

from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery
from aiogram.utils import markdown

import app.database as db
import app.keyboards as kb
from my_bot import bot

router = Router()


class DocumentMess:
    doc_id: int

    def __init__(self, f):
        self.doc_id = f


@router.message(CommandStart())
async def on_start(message: types.Message, state: FSMContext):
    user = message.from_user
    await message.answer_sticker("CAACAgIAAxkBAAEM6o9m_xXrhAqbSSVi3qlJF-avCUEN0AACSB0AAuIkgEot-Nk2wyVajjYE")
    await message.answer("–ü—Ä–∏–≤–µ—Ç " + user.first_name)
    await message.answer(
        "–≠—Ç–æ –±–æ—Ç TrainY! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ª—é–±—É—é –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –ª—é–±—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏–Ω—Ç–µ—Ä–≤—å—é.‚ò∫Ô∏è",
        reply_markup=kb.main)

    db.add_user(user.id, user.username)
    await state.clear()


@router.message(Command('cancel'))
async def on_cancel(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞")
    await state.clear()


class AdminFlow(StatesGroup):
    password = State()
    in_admin = State()
    moderate = State()
    reject = State()


@router.message(Command('admin'))
async def on_admin(message: types.Message, state: FSMContext):
    await state.set_state(AdminFlow.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É")


@router.message(AdminFlow.password)
async def on_admin(message: types.Message, state: FSMContext):
    if message.text == "1234":
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
        await message.answer("/moderate_bundle - –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É–≤–∏–¥–µ—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –±–∞–Ω–¥–ª")
        await state.set_state(AdminFlow.in_admin)
    else:
        await message.answer("–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        await state.clear()


@router.message(Command('moderate_bundle'))
async def moderate_bundle(message: types.Message, state: FSMContext):
    if await state.get_state() != str(AdminFlow.in_admin.state):
        await message.answer(f'–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
        return

    list_bundles = db.get_not_moderated_bundle()
    await message.answer(f'–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - {len(list_bundles)}')

    if len(list_bundles) == 0:
        return

    item = list_bundles[0]
    await message.answer(
        f'(id {item.bundle_id}) - {item.name} - {item.price}‚ÇΩ\n'
        f'{item.direction} - {item.company} - {item.date_interview}')

    await state.set_state(AdminFlow.moderate)
    await state.update_data(bundle=item)
    listt = db.get_bundle(bundle_id=item.bundle_id)
    y: list = json.loads(listt)
    for i in y:
        if type(i) is dict:
            await message.answer_document(i["doc_id"])
        else:
            await message.answer(i)

    await message.answer(f'/approve - –ø—Ä–∏–Ω—è—Ç—å\n'
                         f'/reject - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å')


@router.message(Command('approve'))
async def on_admin(message: types.Message, state: FSMContext):
    if await state.get_state() != str(AdminFlow.moderate.state):
        await message.answer(f'–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
        return
    await message.answer(f'–ü—Ä–∏–Ω—è—Ç–æ')
    state_data = await state.get_data()
    db.approve_bundle(bundle_id=state_data["bundle"].bundle_id)

    await bot.send_message(chat_id=state_data["bundle"].author_id,
                           text=f'–í–∞—à Bundle id - {state_data["bundle"].bundle_id} –±—ã–ª –ø—Ä–∏–Ω—è—Ç')

    await state.set_state(AdminFlow.in_admin)
    await moderate_bundle(message, state)


@router.message(Command('reject'))
async def on_admin(message: types.Message, state: FSMContext):
    if await state.get_state() != str(AdminFlow.moderate.state):
        await message.answer(f'–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
        return
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞')
    await state.set_state(AdminFlow.reject)


@router.message(AdminFlow.reject)
async def on_admin(message: types.Message, state: FSMContext):
    await message.answer(f'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
    #     —É–¥–∞–ª—è–µ–º –∏–∑ –±–¥ –Ω–æ —Å–Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –±–∞–Ω–¥–ª
    state_data = await state.get_data()
    await bot.send_message(chat_id=state_data["bundle"].author_id,
                           text=f'–í–∞—à Bundle id - {state_data["bundle"].bundle_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω')

    await bot.send_message(chat_id=state_data["bundle"].author_id,
                           text=f'–ü—Ä–∏—á–∏–Ω–∞ - {message.text}')

    db.delete_bundle(bundle_id=state_data["bundle"].bundle_id)

    await state.set_state(AdminFlow.in_admin)
    await moderate_bundle(message, state)


@router.message(F.text == 'FAQ')
async def on_FAQ(message: types.Message, state: FSMContext):
    await state.clear()

    text = markdown.text(
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
        "\n",
        "*Windows*",
        "Xbox Game Bar",
        "OBS Studio",
        "bandicam",
        "NVIDIA ShadowPlay",
        "\n",
        "*MacOS*",
        "OBS Studio",
        "SurFlex Screen Recorder",
        "\n",
        "*Telegram*",
        "1 \- –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ —Å–µ–±—è –æ–¥–Ω–æ–≥–æ",
        "2 \- –í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á—É —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —ç–∫—Ä–∞–Ω–∞ –∏ —Ç–∞–º –≤–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å",
        "–ü–∏—à–µ—Ç —Å—Ä–∞–∑—É –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –∑–≤—É–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ —Å–∞–º–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ",
        sep="\n"
    )

    await message.answer(text, protect_content=True, parse_mode=ParseMode.MARKDOWN_V2)


class CatalogFlow(StatesGroup):
    choose_id_buy = State()
    filter_direction = State()
    filter_company = State()
    choose_id_open = State()


@router.message(F.text == '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫')
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ä–∞–∑—É –∂–µ –∫–∞–∫ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.",
        protect_content=True, reply_markup=kb.subscribes)


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(SubscribesFlow.add_sub_direction)
    await message.answer(
        "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
        protect_content=True, reply_markup=kb.directions)


class SubscribesFlow(StatesGroup):
    add_sub_direction = State()
    add_sub_company = State()


@router.message(SubscribesFlow.add_sub_direction)
async def filter_direction(message: types.Message, state: FSMContext):
    await state.update_data(direction=message.text)
    await state.set_state(SubscribesFlow.add_sub_company)
    await message.answer("–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?(–ê–Ω–≥–ª)", protect_content=True)


@router.message(SubscribesFlow.add_sub_company)
async def filter_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    state_data = await state.get_data()
    db.add_subscribe_search(direction=state_data["direction"],
                            company=state_data["company"], chat_id=message.chat.id)
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", protect_content=True, reply_markup=kb.main)
    await state.clear()


@router.message()
async def other(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—èüòÖ", protect_content=True)
    user = message.from_user
    print(message.text + user.username)
