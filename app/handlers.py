from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils import markdown

import app.database as db
import app.keyboards as kb

router = Router()

class DocumentMess:
    doc_id: int

    def __init__(self, f):
        self.doc_id = f

@router.message(F.text == 'FAQ')
async def on_FAQ(message: types.Message, state: FSMContext):
    await state.clear()

    text = markdown.text(
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
        "\n",
        "*Windows*",
        "Xbox Game Bar",
        "OBS Studio",
        "bandicam",
        "NVIDIA ShadowPlay",
        "\n",
        "*MacOS*",
        "OBS Studio",
        "SurFlex Screen Recorder",
        "\n",
        "*Telegram*",
        "1 \- –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ —Å–µ–±—è –æ–¥–Ω–æ–≥–æ",
        "2 \- –í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á—É —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —ç–∫—Ä–∞–Ω–∞ –∏ —Ç–∞–º –≤–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å",
        "–ü–∏—à–µ—Ç —Å—Ä–∞–∑—É –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –∑–≤—É–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ —Å–∞–º–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ",
        sep="\n"
    )

    await message.answer(text, protect_content=True, parse_mode=ParseMode.MARKDOWN_V2)


class CatalogFlow(StatesGroup):
    choose_id_buy = State()
    filter_direction = State()
    filter_company = State()
    choose_id_open = State()


@router.message(F.text == '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫')
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ä–∞–∑—É –∂–µ –∫–∞–∫ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.",
        protect_content=True, reply_markup=kb.subscribes)


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(SubscribesFlow.add_sub_direction)
    await message.answer(
        "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
        protect_content=True, reply_markup=kb.directions)


class SubscribesFlow(StatesGroup):
    add_sub_direction = State()
    add_sub_company = State()


@router.message(SubscribesFlow.add_sub_direction)
async def filter_direction(message: types.Message, state: FSMContext):
    await state.update_data(direction=message.text)
    await state.set_state(SubscribesFlow.add_sub_company)
    await message.answer("–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?(–ê–Ω–≥–ª)", protect_content=True)


@router.message(SubscribesFlow.add_sub_company)
async def filter_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    state_data = await state.get_data()
    db.add_subscribe_search(direction=state_data["direction"],
                            company=state_data["company"], chat_id=message.chat.id)
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", protect_content=True, reply_markup=kb.main)
    await state.clear()


@router.message()
async def other(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—èüòÖ", protect_content=True)
    user = message.from_user
    print(message.text + user.username)
