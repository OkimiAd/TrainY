import json

from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils import markdown

import app.database as db
import app.keyboards as kb

router = Router()

class DocumentMess:
    doc_id: int

    def __init__(self, f):
        self.doc_id = f

@router.message(CommandStart())
async def on_start(message: types.Message, state: FSMContext):
    user = message.from_user

    await message.answer_sticker("CAACAgIAAxkBAAEM6o9m_xXrhAqbSSVi3qlJF-avCUEN0AACSB0AAuIkgEot-Nk2wyVajjYE")

    await message.answer("–ü—Ä–∏–≤–µ—Ç " + user.first_name)
    await message.answer(
        "–≠—Ç–æ –±–æ—Ç TrainY! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ª—é–±—É—é –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –ª—é–±—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏–Ω—Ç–µ—Ä–≤—å—é.‚ò∫Ô∏è",
        reply_markup=kb.main)

    db.add_user(user.id, user.username)
    await state.clear()


@router.message(Command('cancel'))
async def on_cancel(message: types.Message, state: FSMContext):
    await state.clear()


@router.message(F.text == 'FAQ')
async def on_FAQ(message: types.Message, state: FSMContext):
    await state.clear()

    text = markdown.text(
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
        "\n",
        "*Windows*",
        "Xbox Game Bar",
        "OBS Studio",
        "bandicam",
        "NVIDIA ShadowPlay",
        "\n",
        "*MacOS*",
        "OBS Studio",
        "SurFlex Screen Recorder",
        "\n",
        "*Telegram*",
        "1 \- –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ —Å–µ–±—è –æ–¥–Ω–æ–≥–æ",
        "2 \- –í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á—É —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —ç–∫—Ä–∞–Ω–∞ –∏ —Ç–∞–º –≤–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å",
        "–ü–∏—à–µ—Ç —Å—Ä–∞–∑—É –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –∑–≤—É–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ —Å–∞–º–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ",
        sep="\n"
    )

    await message.answer(text, protect_content=True, parse_mode=ParseMode.MARKDOWN_V2)


class CatalogFlow(StatesGroup):
    choose_id_buy = State()
    choose_id_open = State()

@router.message(Command('open_bundle'))
async def open_bundle(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø–∏—à–∏ id –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–µ–±—è bundle", protect_content=True)
    await state.set_state(CatalogFlow.choose_id_open)




@router.message(F.text == '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–Ω–µ')
async def on_catalog(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø–∏—à–∏ /open_bundle", protect_content=True)
    list_bundles = db.get_available_bundles_for_user(user_id=message.from_user.id)

    for item in list_bundles:
        await message.answer(
            f'id - {item.bundle_id}\n{item.name}\n{item.company}\n{item.direction}\n{item.date_interview}\n{item.price}‚ÇΩ')


@router.message(CatalogFlow.choose_id_open)
async def date_bundle(message: types.Message, state: FSMContext):
    have_access = db.user_have_bundle_access(message.from_user.id, int( message.text))
    if not have_access:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É bundle. –°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ö–∞—Ç–∞–ª–æ–≥ –∏–Ω—Ç–µ—Ä–µ–≤—å—é\"")
    else:
        listt = db.get_bundle(bundle_id = message.text)
        y: list = json.loads(listt)
        for i in y:
            if type(i) is dict:
                await message.answer_document(i["doc_id"])
            else:
                await message.answer(i)


@router.message()
async def other(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—èüòÖ", protect_content=True)
    user = message.from_user
    print(message.text + user.username)
