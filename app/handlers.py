import googletrans
from aiogram import types, Router, F
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.utils import markdown
from googletrans import Translator
# from translate import Translator
# from transliterate import translit

import app.data.database as db
import app.keyboards as kb

router = Router()


class DocumentMess:
    type_doc: str = "doc"
    caption: str = ""
    file_id: int

    def __init__(self, f, type_doc, caption):
        self.file_id = f
        self.type_doc = type_doc
        self.caption = caption


class SubscribesFlow(StatesGroup):
    add_sub_direction = State()
    add_sub_company = State()
    delete_sub = State()
    delete_all_sub = State()
    translate = State()


@router.message(Command('translate'))
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(SubscribesFlow.translate)


@router.message(SubscribesFlow.translate)
async def subscribe_search(message: types.Message, state: FSMContext):
    translator = Translator()
    translation = translator.translate(message.text, dest = "en")
    # translation = translit(message.text, 'ru', reversed=True)
    print(googletrans.LANGUAGES)
    await message.answer(translation.text)


@router.message(F.text == 'FAQ')
async def on_FAQ(message: types.Message, state: FSMContext):
    await state.clear()

    text = markdown.text(
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:",
        "\n",
        "*Windows*",
        "Xbox Game Bar",
        "OBS Studio",
        "bandicam",
        "NVIDIA ShadowPlay",
        "\n",
        "*MacOS*",
        "OBS Studio",
        "SurFlex Screen Recorder",
        "\n",
        "*Telegram*",
        "1 \- –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ —Å–µ–±—è –æ–¥–Ω–æ–≥–æ",
        "2 \- –í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á—É —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —ç–∫—Ä–∞–Ω–∞ –∏ —Ç–∞–º –≤–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å",
        "–ü–∏—à–µ—Ç —Å—Ä–∞–∑—É –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –∑–≤—É–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ —Å–∞–º–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ",
        sep="\n"
    )

    await message.answer(text, protect_content=True, parse_mode=ParseMode.MARKDOWN_V2)


class CatalogFlow(StatesGroup):
    choose_id_buy = State()
    filter_direction = State()
    filter_company = State()
    choose_id_open = State()


@router.message(F.text == '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫')
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ä–∞–∑—É –∂–µ –∫–∞–∫ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.",
        protect_content=True, reply_markup=kb.subscribes)


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(SubscribesFlow.add_sub_direction)
    await message.answer(
        "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
        protect_content=True, reply_markup=kb.directions)


@router.message(F.text == '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    list_subs = db.get_subscribes_for_user(chat_id=message.chat.id)
    if len(list_subs) == 0:
        await message.answer(
            "–ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\"",
            protect_content=True)
        return

    await message.answer(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ \n/delete_sub –∏–ª–∏ /delete_sub_all",
        protect_content=True)

    for sub in list_subs:
        await message.answer(
            f'id *{sub[0]}* \- *{sub[3]}* \- *{sub[2]}*',
            protect_content=True)


@router.message(Command('delete_sub'))
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(SubscribesFlow.delete_sub)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")


@router.message(Command('delete_sub_all'))
async def subscribe_search(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(SubscribesFlow.delete_all_sub)
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏? Y/N")


@router.message(SubscribesFlow.delete_sub)
async def filter_direction(message: types.Message, state: FSMContext):
    try:
        db.delete_subscribe(chat_id=message.chat.id, sub_id=int(message.text))
        await message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ id {int(message.text)} —É–¥–∞–ª–µ–Ω–∞')
    except:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ id(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)')


@router.message(SubscribesFlow.delete_all_sub)
async def filter_direction(message: types.Message, state: FSMContext):
    if message.text == 'Y':
        db.delete_all_subscribes(chat_id=message.chat.id)
        await message.answer(f'–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã')
        await state.clear()
    elif message.text == 'N':
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞", reply_markup=kb.main)
        await state.clear()
    else:
        await message.answer("Y/N?")


@router.message(SubscribesFlow.add_sub_direction)
async def filter_direction(message: types.Message, state: FSMContext):
    await state.update_data(direction=message.text)
    await state.set_state(SubscribesFlow.add_sub_company)
    await message.answer("–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?(–ê–Ω–≥–ª)", protect_content=True)


@router.message(SubscribesFlow.add_sub_company)
async def filter_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    state_data = await state.get_data()
    db.add_subscribe_search(direction=state_data["direction"],
                            company=state_data["company"], chat_id=message.chat.id)
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", protect_content=True, reply_markup=kb.main)
    await state.clear()


@router.message()
async def other(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—èüòÖ", protect_content=True)
