from typing import Union, Type

from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.database
import app.keyboards as kb





class Bundle(StatesGroup):
    creating = State()
    # items: Type[Union[TextMessage, DocumentMessage]]


# @router.message(CommandStart())
# async def on_start(message: types.Message, state: FSMContext):
#     await message.answer("on_start")
#     await state.set_state(Form.name)
    # user = message.from_user
    # await message.answer_sticker("CAACAgIAAxkBAAEM6fVm_qXxZ7ZxROUM-u_AIYJFa1zMGwAC6iMAAhvGAUqp6ktzFro9QjYE")
    #
    # await message.answer("–ü—Ä–∏–≤–µ—Ç " + user.first_name)
    # await message.answer(
    #     "–≠—Ç–æ –±–æ—Ç TrainY! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ª—é–±—É—é –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –ª—é–±—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π.\n–î–ª—è –≤—Å–µ—Ö –Ω–æ–≤–∏—á–∫–æ–≤ —Å–∫–∏–¥–∫–∞ 100% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É‚ò∫Ô∏è",
    #     reply_markup=kb.main)
    #
    # app.database.add_user(user.id, user.username)
    # print("/start " + user.username)

@router.message(Form.name)
async def assembly_bundle(message: types.Message, state: FSMContext):
    await message.answer("assembly_bundle")


@router.message(Command("help"))
async def on_help(message: types.Message):
    user = message.from_user
    print("/help " + user.username)
    await on_FAQ(message)


@router.message(F.text == 'FAQ')
async def on_FAQ(message: types.Message):
    await message.answer("–¢—É—Ç —Ç—ã –Ω–∞–π–¥–µ—à—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç—Å—Ç—Ä—É–∫–∏—é –ø–æ —Ç–æ–º—É —á—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç", protect_content=True)
    await message.answer("1. –ü–ª–∞—Ç–∏ –±–æ–ª—å—à–µ –¥–µ–Ω—è–∫")

    user = message.from_user

    print("FAQ " + user.username)


# @router.message()
# async def on_FAQ(message: types.Message):
#     await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—èüòÖ", protect_content=True)
#     user = message.from_user
#     print(message.text + user.username)
#

@router.message(F.text == '–î–ª—è –∞–≤—Ç–æ—Ä–æ–≤')
async def create_bundle(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–∞–ø–∏—Å–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∏–¥–µ –±–∞–Ω–¥–ª–æ–≤. "
        "–ö–∞–∂–¥—ã–π –±–∞–Ω–¥–ª —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞, –∞—É–¥–∏–æ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. "
        "–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. "
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –±–µ–∑ —Å–∂–∞—Ç–∏—è")


    await state.set_state(Bundle.creating)
    await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–¥–ª–∞ –æ—Ç–ø—Ä–∞–≤—å–µ\n/commit")

    user = message.from_user
    print("–î–ª—è –∞–≤—Ç–æ—Ä–æ–≤ " + user.username)

